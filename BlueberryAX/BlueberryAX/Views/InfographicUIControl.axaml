<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
			 xmlns:controls="using:BlueberryAX.Controls"
			 xmlns:viewModels="using:BlueberryAX"
			 xmlns:converters="using:BlueberryAX.ValueConverters"
             x:Class="BlueberryAX.Views.InfographicUIControl">

	<!--<Grid Background="Red">
		<Label Content="How are you" />

	</Grid>-->

	<!--Main Grid for the Page-->
	<Grid Background="Gainsboro">
		<!--Column Definitions-->
		<Grid.RowDefinitions>
			<!-- Row definitions for the date picker 
            and the AM/PM button-->
			<RowDefinition Height="auto"/>
			<RowDefinition Height="auto"/>
			<RowDefinition Height="2*"/>
			<RowDefinition Height="auto"/>
		</Grid.RowDefinitions>

		<!-- container for the date picker and the AM/PM button-->
		<Grid Grid.Row="0">
			<!-- Column Definitions-->
			<Grid.ColumnDefinitions>
				<!-- textblock for date picker -->
				<ColumnDefinition Width="*" />
				<!-- Date picker -->
				<ColumnDefinition Width="*" />
				<!-- AM / PM Button -->
				<ColumnDefinition Width="*" />
			</Grid.ColumnDefinitions>
			<!-- textblock for date picker -->
			<TextBlock Grid.Column="0" HorizontalAlignment="Right"
                       FontSize="18"
                       VerticalAlignment="Center"
                       Text="Current Date (or pick one) : " />
			<!-- Some code I found on the internet to have a time picker as well
            it was on a downloaded extension "time picker" date picker extension -->
			<!--<wpfx:DateTimePicker Height="25" HorizontalAlignment="Left" 
                                 Margin="42,26,0,0" Name="DateTimePicker1" 
                                 VerticalAlignment="Top" Width="250" />-->
			<!--<Grid Grid.Column="1">
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto" />
                    <RowDefinition Height="20" />
                </Grid.RowDefinitions>-->

			<!-- Date picker -->
			<DatePicker Grid.Column="1" Margin="5,10,0,5"
                    HorizontalAlignment="Center"
                        VerticalAlignment="Top"
                        SelectedDate="{Binding CurrentDateToShow, Mode=TwoWay}">
			</DatePicker>
			<!--</Grid>-->

			<!--TODO: I was trying to add some kind of binding from the 
            datepicker on the page to the ContainerViewModel to update 
            the current display date -->
			<!--SelectedDateChanged={Binding DateChanged}"/>-->

			<!--<Button Grid.Column="2" FontSize="18" FontWeight="Bold"
                    Background="LimeGreen"
                    Content="{Binding MorningOrNight, 
                Converter={local:AMAndPMToButtonContentConverter}}"
                    Command="{Binding ToggleAmAndPmCommand}"
                    >-->

			<!-- AM / PM Button -->
			<Button Grid.Column="2" FontSize="18" FontWeight="Bold"
                    Background="LimeGreen"
                    Content="AM or PM"
                    Command="{Binding ToggleAmAndPmCommand}">
			</Button>
		</Grid>

		<!-- Horizontal container for forward and back
        buttons and current date and AM/PM -->
		<Grid Grid.Row="1" Background="Black" Height="50">
			<!-- Column defs -->
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="5" />
				<ColumnDefinition Width="auto" />
				<ColumnDefinition Width="auto" />
				<ColumnDefinition Width="*" />
				<ColumnDefinition Width="auto" />
				<ColumnDefinition Width="auto" />
				<ColumnDefinition Width="5" />
			</Grid.ColumnDefinitions>

			<!-- Button to refresh the infographic to 24 hours prior -->
			<Button Grid.Column="1" Content="  Back 24 hrs " Background="LimeGreen"
                    FontSize="18" Command="{Binding GoBack24HoursCommand}">
			</Button>

			<!-- Button to refresh the infographic to 12 hours prior -->
			<Button Grid.Column="2" Content="  Back 12 hrs  " Background="LimeGreen"
                    FontSize="18" Command="{Binding GoBack12HoursCommand}">
			</Button>

			<!-- the nice pretty text that shows the currently displayed
            date and whether it is am or pm -->

			<TextBlock Grid.Column="3" Text="{Binding DateTimePrettyText}"
                       FontSize="25" VerticalAlignment="Center"
                       HorizontalAlignment="Center"
                       Background="Beige"/>

			<!-- Button to refresh the infographic to 12 hours ahead -->
			<Button Grid.Column="4" Content="Forward 12 hrs" Background="LimeGreen"
                    FontSize="18" Command="{Binding GoForward12HoursCommand}">
			</Button>

			<!-- Button to refresh the infographic to 24 hours ahead -->
			<Button Grid.Column="5" Content="Forward 24 hrs" Background="LimeGreen"
                    FontSize="18" Command="{Binding GoForward24HoursCommand}">
			</Button>
		</Grid>

		<!-- The Infographic Main Grid -->
		<Grid Grid.Row="2">

			<Grid>
				<!--MinWidth="{Binding ContainerWidth}"
				MinHeight="{Binding ContainerHeight}"-->

				<!-- Background Yellow Circle -->
				<Border
					Width="{Binding InfographicOD}"
					Height="{Binding InfographicOD}"
					Background="Yellow"
					CornerRadius="{Binding InfographicCornerRadius}"
					HorizontalAlignment="Center"
					VerticalAlignment="Center"
					>
				</Border>

				<Border
					Width="{Binding RadarBackgrdOD}"
				    Height="{Binding RadarBackgrdOD}"
					Background="Black"
					CornerRadius="{Binding RadarBackgrdCornerRadius}"
					HorizontalAlignment="Center"
					VerticalAlignment="Center"
					ZIndex="1">
				</Border>
				
				<Canvas Background="Yellow" Width="300" Height="400">
    <Rectangle Fill="Blue" Width="63" Height="41" Canvas.Left="40" Canvas.Top="31">
        <Rectangle.OpacityMask>
            <LinearGradientBrush StartPoint="0%,0%" EndPoint="100%,100%">
                <LinearGradientBrush.GradientStops>
                    <GradientStop Offset="0" Color="Black"/>
                    <GradientStop Offset="1" Color="Transparent"/>
                </LinearGradientBrush.GradientStops>
            </LinearGradientBrush>
        </Rectangle.OpacityMask>     
    </Rectangle>
    <Ellipse Fill="Green" Width="58" Height="58" Canvas.Left="88" Canvas.Top="100"/>
    <Path Fill="Orange" Data="M 0,0 c 0,0 50,0 50,-50 c 0,0 50,0 50,50 h -50 v 50 l -50,-50 Z" Canvas.Left="30" Canvas.Top="250"/>
    <Path Fill="OrangeRed" Canvas.Left="180" Canvas.Top="250">
        <Path.Data>
            <PathGeometry>
                <PathFigure StartPoint="0,0" IsClosed="True">
                    <QuadraticBezierSegment Point1="50,0" Point2="50,-50" />
                    <QuadraticBezierSegment Point1="100,-50" Point2="100,0" />
                    <LineSegment Point="50,0" />
                    <LineSegment Point="50,50" />
                </PathFigure>
            </PathGeometry>
        </Path.Data>
    </Path>
    <Line StartPoint="120,185" EndPoint="30,115" Stroke="Red" StrokeThickness="2"/>
    <Polygon Points="75,0 120,120 0,45 150,45 30,120" Stroke="DarkBlue" StrokeThickness="1" Fill="Violet" Canvas.Left="150" Canvas.Top="31"/>
    <Polyline Points="0,0 65,0 78,-26 91,39 104,-39 117,13 130,0 195,0" Stroke="Brown" Canvas.Left="30" Canvas.Top="350"/>
</Canvas>
			
				
				
			
			
			</Grid>


		</Grid>

		<!-- Main grid to display all of the graphic segments in the "Background" list
        - I have no idea how this works and I haven't f'd with it... hate the name
        just saying. -->
		<!--<Grid
            Background="Black"
            Grid.Row="2">

			-->
		<!-- BackGround -->
		<!--

			<Grid
                MinWidth="{Binding ContainerWidth}"
                MinHeight="{Binding ContainerHeight}"
                >
				<Border
                    Width="{Binding OuterDiameter}"
                    Height="{Binding OuterDiameter}"
                    Background="{Binding BackgroundColor, 
                    Converter={converters:BackGroundColorConverter}}"
                    CornerRadius="{Binding RelativeSource={RelativeSource self}, 
                    Path=ActualWidth, 
                    Converter={converters:MultiplyConverter},
                    ConverterParameter=0.5}"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    />
				<Border
                    Width="{Binding InnerDiameter}"
                    Height="{Binding InnerDiameter}"
                    Background="Black"
                    CornerRadius="{Binding RelativeSource={RelativeSource self}, 
                    Path=ActualWidth, 
                    Converter={converters:MultiplyConverter},
                    ConverterParameter=0.5}"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    />

			</Grid>

			<ItemsControl
                DataContext="{Binding BackGround}"
                ItemsSource="{Binding RadialGraphicSegments}">

				<ItemsControl.ItemsPanel>
					<ItemsPanelTemplate>
						<Canvas
                            Width="{Binding ContainerWidth}"
                            Height="{Binding ContainerHeight}"/>
					</ItemsPanelTemplate>
				</ItemsControl.ItemsPanel>
				<ItemsControl.ItemContainerStyle>
					<Style>
						<Setter
                            Property="Canvas.Left"
                            Value="{Binding Left}"
                            />
						<Setter
                            Property="Canvas.Top"
                            Value="{Binding Top}"
                            />
					</Style>
				</ItemsControl.ItemContainerStyle>
				<ItemsControl.Resources>
					<DataTemplate DataType="{x:Type viewModels:BaseArcRadialSegmentViewModel}">
						<controls:RadialSegmentControl Background="{Binding Color, Converter={converters:BackGroundColorConverter}}" />
					</DataTemplate>

					<DataTemplate DataType="{x:Type viewModels:TextOnlyViewModel}">
						<controls:RadialTextSegmentControl Background="{Binding Color, Converter={converters:BackGroundColorConverter}}" />
					</DataTemplate>

					<DataTemplate DataType="{x:Type viewModels:IconOnlyViewModel}">
						<controls:RadialTextSegmentControl
                            FontFamily="{StaticResource FontAwesome}"
                            Background="{Binding Color, Converter={converters:BackGroundColorConverter}}" />
					</DataTemplate>

					<DataTemplate DataType="{x:Type viewModels:RotatableRectangleViewModel}">
						<controls:RotatableRectangleControl Background="{Binding Color, Converter={converters:BackGroundColorConverter}}" />
					</DataTemplate>
				</ItemsControl.Resources>


			</ItemsControl>
			-->
		<!-- Second Items control on the same graphic... I like it... they must overlap
            each other... ???? I guess ... except they are on different grid rows.  ??? wtf?-->
		<!--
			-->
		<!-- Annotations -->
		<!--
			<ItemsControl
                DataContext="{Binding ForeGround}"
                ItemsSource="{Binding RadialGraphicSegments}">

				<ItemsControl.ItemsPanel>
					<ItemsPanelTemplate>
						<Canvas
                            Width="{Binding ContainerWidth}"
                            Height="{Binding ContainerHeight}"/>
					</ItemsPanelTemplate>
				</ItemsControl.ItemsPanel>
				<ItemsControl.ItemContainerStyle>
					<Style>
						<Setter
                            Property="Canvas.Left"
                            Value="{Binding Left}"
                            />
						<Setter
                            Property="Canvas.Top"
                            Value="{Binding Top}"
                            />
					</Style>
				</ItemsControl.ItemContainerStyle>
				<ItemsControl.Resources>
					<DataTemplate DataType="{x:Type viewModels:BaseArcRadialSegmentViewModel}">
						<controls:RadialSegmentControl Background="{Binding Color, Converter={converters:BackGroundColorConverter}}" />
					</DataTemplate>

					<DataTemplate DataType="{x:Type viewModels:TextOnlyViewModel}">
						<controls:RadialTextSegmentControl Background="{Binding Color, Converter={converters:BackGroundColorConverter}}" />
					</DataTemplate>

					<DataTemplate DataType="{x:Type viewModels:IconOnlyViewModel}">
						<controls:RadialTextSegmentControl
                            FontFamily="{StaticResource FontAwesome}"
                            Background="{Binding Color, Converter={converters:BackGroundColorConverter}}" />
					</DataTemplate>

					<DataTemplate DataType="{x:Type viewModels:RotatableRectangleViewModel}">
						<controls:RotatableRectangleControl Background="{Binding Color, Converter={converters:BackGroundColorConverter}}" />
					</DataTemplate>
				</ItemsControl.Resources>

			</ItemsControl>
		</Grid>-->


	</Grid>




</UserControl>
